"""
Django settings for djangoProyect project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import pandas as pd
import random
import time
from threading import Thread

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*l+sp3d*e53^3rcrw0s6wi9gy=rtx5^&e66#a@u-$_@!u!l&1g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djangoProyect.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangoProyect.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

def bubbleSort(A):
    ti = time.time()
    n = len(A)
    ordenado = False

    for i in range(n-1):
        for j in range(0, n-i-1):
            if A[j] > A[j+1]:
                ordenado = True
                A[j], A[j+1] = A[j+1], A[j]

    return A, f"Tiempo: {time.time()-ti}"

def linearSearch(A, x):
    ti = time.time()
    posicion = 0
    p = -1

    while posicion < len(A):
      if x == A[posicion]:
        found = True        
        p = posicion
        break
      posicion +=1
    
    tf = time.time()
    return p, f"Tiempo: {tf-ti}"

def makeA():
    num = 317243286
    A = pd.Series([random.randint(num, num+5_000) for i in range(5_000)])
    return A

def bS(A):
    par = [i for i in A if i%2 ==0] 
    impar = [i for i in A if i%2 !=0] 

    ti = time.time()
    h1 = Thread(target=bubbleSort(par)).start()
    h2 = Thread(target=bubbleSort(impar)).start()
    A = par+impar
    bubbleSort(pd.Series(A))
    tf = time.time()

    return A, f"Tiempo: {tf-ti}"

global found 
def lS(A, x, axis=0):
    found = False

    if axis == 0:
        posicion = 0
        ti = time.time()
        while posicion < len(A) and not found:
            if x == A[posicion]:
                found = True
                tf = time.time()
                return posicion, f"Tiempo: {tf-ti}"
            posicion +=1

    else:
        posicion = len(A)-1
        ti = time.time()
        while posicion >= 0 and not found:
            if x == A[posicion]:
                found = True
                tf = time.time()
                return posicion, f"Tiempo: {tf-ti}"
            posicion -=1
    return -1
    